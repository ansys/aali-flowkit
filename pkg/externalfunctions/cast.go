// Copyright (C) 2025 ANSYS, Inc. and/or its affiliates.
// SPDX-License-Identifier: MIT
//
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by internal/gen/cast/gen.go; DO NOT EDIT.

package externalfunctions

// CastAnyToString casts data of type any to string
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to String
//
// Parameters:
//   - data (any)
//
// Returns
//   - string
func CastAnyToString(data any) string {
	return data.(string)
}

// CastAnyToBool casts data of type any to bool
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Bool
//
// Parameters:
//   - data (any)
//
// Returns
//   - bool
func CastAnyToBool(data any) bool {
	return data.(bool)
}

// CastAnyToInt8 casts data of type any to int8
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Int8
//
// Parameters:
//   - data (any)
//
// Returns
//   - int8
func CastAnyToInt8(data any) int8 {
	return data.(int8)
}

// CastAnyToInt16 casts data of type any to int16
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Int16
//
// Parameters:
//   - data (any)
//
// Returns
//   - int16
func CastAnyToInt16(data any) int16 {
	return data.(int16)
}

// CastAnyToInt32 casts data of type any to int32
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Int32
//
// Parameters:
//   - data (any)
//
// Returns
//   - int32
func CastAnyToInt32(data any) int32 {
	return data.(int32)
}

// CastAnyToInt64 casts data of type any to int64
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Int64
//
// Parameters:
//   - data (any)
//
// Returns
//   - int64
func CastAnyToInt64(data any) int64 {
	return data.(int64)
}

// CastAnyToInt casts data of type any to int
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Int
//
// Parameters:
//   - data (any)
//
// Returns
//   - int
func CastAnyToInt(data any) int {
	return data.(int)
}

// CastAnyToUint8 casts data of type any to uint8
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Uint8
//
// Parameters:
//   - data (any)
//
// Returns
//   - uint8
func CastAnyToUint8(data any) uint8 {
	return data.(uint8)
}

// CastAnyToUint16 casts data of type any to uint16
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Uint16
//
// Parameters:
//   - data (any)
//
// Returns
//   - uint16
func CastAnyToUint16(data any) uint16 {
	return data.(uint16)
}

// CastAnyToUint32 casts data of type any to uint32
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Uint32
//
// Parameters:
//   - data (any)
//
// Returns
//   - uint32
func CastAnyToUint32(data any) uint32 {
	return data.(uint32)
}

// CastAnyToUint64 casts data of type any to uint64
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Uint64
//
// Parameters:
//   - data (any)
//
// Returns
//   - uint64
func CastAnyToUint64(data any) uint64 {
	return data.(uint64)
}

// CastAnyToUint casts data of type any to uint
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Uint
//
// Parameters:
//   - data (any)
//
// Returns
//   - uint
func CastAnyToUint(data any) uint {
	return data.(uint)
}

// CastAnyToFloat32 casts data of type any to float32
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Float32
//
// Parameters:
//   - data (any)
//
// Returns
//   - float32
func CastAnyToFloat32(data any) float32 {
	return data.(float32)
}

// CastAnyToFloat64 casts data of type any to float64
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Float64
//
// Parameters:
//   - data (any)
//
// Returns
//   - float64
func CastAnyToFloat64(data any) float64 {
	return data.(float64)
}

// CastAnyToComplex64 casts data of type any to complex64
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Complex64
//
// Parameters:
//   - data (any)
//
// Returns
//   - complex64
func CastAnyToComplex64(data any) complex64 {
	return data.(complex64)
}

// CastAnyToComplex128 casts data of type any to complex128
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Complex128
//
// Parameters:
//   - data (any)
//
// Returns
//   - complex128
func CastAnyToComplex128(data any) complex128 {
	return data.(complex128)
}

// CastAnyToByte casts data of type any to byte
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Byte
//
// Parameters:
//   - data (any)
//
// Returns
//   - byte
func CastAnyToByte(data any) byte {
	return data.(byte)
}

// CastAnyToRune casts data of type any to rune
//
// This is done via a type assertion. Will panic if assertion fails.
//
// Tags:
//   - @displayName: Cast Any to Rune
//
// Parameters:
//   - data (any)
//
// Returns
//   - rune
func CastAnyToRune(data any) rune {
	return data.(rune)
}

// CastArrayMapStringAnyToAny casts data of type []map[string]any to any
//
// Tags:
//   - @displayName: Cast []map[string]any to any
//
// Parameters:
//   - data ([]map[string]any)
//
// Returns
//   - any
func CastArrayMapStringAnyToAny(data []map[string]any) any {
	return data
}

// CastAnyToInterface casts data of type any to interface {}
//
// Tags:
//   - @displayName: Cast any to interface{}
//
// Parameters:
//   - data (any)
//
// Returns
//   - interface {}
func CastAnyToInterface(data any) interface{} {
	return data
}

// CastInterfaceToAny casts data of type interface {} to any
//
// Tags:
//   - @displayName: Cast interface{} to any
//
// Parameters:
//   - data (interface {})
//
// Returns
//   - any
func CastInterfaceToAny(data interface{}) any {
	return data
}

// CastStringToAny casts data of type string to any
//
// Tags:
//   - @displayName: Cast String to Any
//
// Parameters:
//   - data (string)
//
// Returns
//   - any
func CastStringToAny(data string) any {
	return data
}

// CastBoolToAny casts data of type bool to any
//
// Tags:
//   - @displayName: Cast Bool to Any
//
// Parameters:
//   - data (bool)
//
// Returns
//   - any
func CastBoolToAny(data bool) any {
	return data
}

// CastInt8ToAny casts data of type int8 to any
//
// Tags:
//   - @displayName: Cast Int8 to Any
//
// Parameters:
//   - data (int8)
//
// Returns
//   - any
func CastInt8ToAny(data int8) any {
	return data
}

// CastInt16ToAny casts data of type int16 to any
//
// Tags:
//   - @displayName: Cast Int16 to Any
//
// Parameters:
//   - data (int16)
//
// Returns
//   - any
func CastInt16ToAny(data int16) any {
	return data
}

// CastInt32ToAny casts data of type int32 to any
//
// Tags:
//   - @displayName: Cast Int32 to Any
//
// Parameters:
//   - data (int32)
//
// Returns
//   - any
func CastInt32ToAny(data int32) any {
	return data
}

// CastInt64ToAny casts data of type int64 to any
//
// Tags:
//   - @displayName: Cast Int64 to Any
//
// Parameters:
//   - data (int64)
//
// Returns
//   - any
func CastInt64ToAny(data int64) any {
	return data
}

// CastIntToAny casts data of type int to any
//
// Tags:
//   - @displayName: Cast Int to Any
//
// Parameters:
//   - data (int)
//
// Returns
//   - any
func CastIntToAny(data int) any {
	return data
}

// CastUint8ToAny casts data of type uint8 to any
//
// Tags:
//   - @displayName: Cast Uint8 to Any
//
// Parameters:
//   - data (uint8)
//
// Returns
//   - any
func CastUint8ToAny(data uint8) any {
	return data
}

// CastUint16ToAny casts data of type uint16 to any
//
// Tags:
//   - @displayName: Cast Uint16 to Any
//
// Parameters:
//   - data (uint16)
//
// Returns
//   - any
func CastUint16ToAny(data uint16) any {
	return data
}

// CastUint32ToAny casts data of type uint32 to any
//
// Tags:
//   - @displayName: Cast Uint32 to Any
//
// Parameters:
//   - data (uint32)
//
// Returns
//   - any
func CastUint32ToAny(data uint32) any {
	return data
}

// CastUint64ToAny casts data of type uint64 to any
//
// Tags:
//   - @displayName: Cast Uint64 to Any
//
// Parameters:
//   - data (uint64)
//
// Returns
//   - any
func CastUint64ToAny(data uint64) any {
	return data
}

// CastUintToAny casts data of type uint to any
//
// Tags:
//   - @displayName: Cast Uint to Any
//
// Parameters:
//   - data (uint)
//
// Returns
//   - any
func CastUintToAny(data uint) any {
	return data
}

// CastFloat32ToAny casts data of type float32 to any
//
// Tags:
//   - @displayName: Cast Float32 to Any
//
// Parameters:
//   - data (float32)
//
// Returns
//   - any
func CastFloat32ToAny(data float32) any {
	return data
}

// CastFloat64ToAny casts data of type float64 to any
//
// Tags:
//   - @displayName: Cast Float64 to Any
//
// Parameters:
//   - data (float64)
//
// Returns
//   - any
func CastFloat64ToAny(data float64) any {
	return data
}

// CastComplex64ToAny casts data of type complex64 to any
//
// Tags:
//   - @displayName: Cast Complex64 to Any
//
// Parameters:
//   - data (complex64)
//
// Returns
//   - any
func CastComplex64ToAny(data complex64) any {
	return data
}

// CastComplex128ToAny casts data of type complex128 to any
//
// Tags:
//   - @displayName: Cast Complex128 to Any
//
// Parameters:
//   - data (complex128)
//
// Returns
//   - any
func CastComplex128ToAny(data complex128) any {
	return data
}

// CastByteToAny casts data of type byte to any
//
// Tags:
//   - @displayName: Cast Byte to Any
//
// Parameters:
//   - data (byte)
//
// Returns
//   - any
func CastByteToAny(data byte) any {
	return data
}

// CastRuneToAny casts data of type rune to any
//
// Tags:
//   - @displayName: Cast Rune to Any
//
// Parameters:
//   - data (rune)
//
// Returns
//   - any
func CastRuneToAny(data rune) any {
	return data
}

func init() {
	ExternalFunctionsMap["CastAnyToString"] = CastAnyToString
	ExternalFunctionsMap["CastAnyToBool"] = CastAnyToBool
	ExternalFunctionsMap["CastAnyToInt8"] = CastAnyToInt8
	ExternalFunctionsMap["CastAnyToInt16"] = CastAnyToInt16
	ExternalFunctionsMap["CastAnyToInt32"] = CastAnyToInt32
	ExternalFunctionsMap["CastAnyToInt64"] = CastAnyToInt64
	ExternalFunctionsMap["CastAnyToInt"] = CastAnyToInt
	ExternalFunctionsMap["CastAnyToUint8"] = CastAnyToUint8
	ExternalFunctionsMap["CastAnyToUint16"] = CastAnyToUint16
	ExternalFunctionsMap["CastAnyToUint32"] = CastAnyToUint32
	ExternalFunctionsMap["CastAnyToUint64"] = CastAnyToUint64
	ExternalFunctionsMap["CastAnyToUint"] = CastAnyToUint
	ExternalFunctionsMap["CastAnyToFloat32"] = CastAnyToFloat32
	ExternalFunctionsMap["CastAnyToFloat64"] = CastAnyToFloat64
	ExternalFunctionsMap["CastAnyToComplex64"] = CastAnyToComplex64
	ExternalFunctionsMap["CastAnyToComplex128"] = CastAnyToComplex128
	ExternalFunctionsMap["CastAnyToByte"] = CastAnyToByte
	ExternalFunctionsMap["CastAnyToRune"] = CastAnyToRune
	ExternalFunctionsMap["CastArrayMapStringAnyToAny"] = CastArrayMapStringAnyToAny
	ExternalFunctionsMap["CastAnyToInterface"] = CastAnyToInterface
	ExternalFunctionsMap["CastInterfaceToAny"] = CastInterfaceToAny
	ExternalFunctionsMap["CastStringToAny"] = CastStringToAny
	ExternalFunctionsMap["CastBoolToAny"] = CastBoolToAny
	ExternalFunctionsMap["CastInt8ToAny"] = CastInt8ToAny
	ExternalFunctionsMap["CastInt16ToAny"] = CastInt16ToAny
	ExternalFunctionsMap["CastInt32ToAny"] = CastInt32ToAny
	ExternalFunctionsMap["CastInt64ToAny"] = CastInt64ToAny
	ExternalFunctionsMap["CastIntToAny"] = CastIntToAny
	ExternalFunctionsMap["CastUint8ToAny"] = CastUint8ToAny
	ExternalFunctionsMap["CastUint16ToAny"] = CastUint16ToAny
	ExternalFunctionsMap["CastUint32ToAny"] = CastUint32ToAny
	ExternalFunctionsMap["CastUint64ToAny"] = CastUint64ToAny
	ExternalFunctionsMap["CastUintToAny"] = CastUintToAny
	ExternalFunctionsMap["CastFloat32ToAny"] = CastFloat32ToAny
	ExternalFunctionsMap["CastFloat64ToAny"] = CastFloat64ToAny
	ExternalFunctionsMap["CastComplex64ToAny"] = CastComplex64ToAny
	ExternalFunctionsMap["CastComplex128ToAny"] = CastComplex128ToAny
	ExternalFunctionsMap["CastByteToAny"] = CastByteToAny
	ExternalFunctionsMap["CastRuneToAny"] = CastRuneToAny
}
